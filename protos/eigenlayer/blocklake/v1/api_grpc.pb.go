// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: eigenlayer/blocklake/v1/api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Api_SayHello_FullMethodName = "/eigenlayer.blocklake.api.v1.Api/SayHello"
)

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, Api_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
// All implementations should embed UnimplementedApiServer
// for forward compatibility.
type ApiServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
}

// UnimplementedApiServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApiServer struct{}

func (UnimplementedApiServer) SayHello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedApiServer) testEmbeddedByValue() {}

// UnsafeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServer will
// result in compilation errors.
type UnsafeApiServer interface {
	mustEmbedUnimplementedApiServer()
}

func RegisterApiServer(s grpc.ServiceRegistrar, srv ApiServer) {
	// If the following call pancis, it indicates UnimplementedApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Api_ServiceDesc, srv)
}

func _Api_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Api_ServiceDesc is the grpc.ServiceDesc for Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eigenlayer.blocklake.api.v1.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Api_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eigenlayer/blocklake/v1/api.proto",
}

const (
	Backfiller_StartBackfill_FullMethodName                  = "/eigenlayer.blocklake.api.v1.Backfiller/StartBackfill"
	Backfiller_PurgeQueues_FullMethodName                    = "/eigenlayer.blocklake.api.v1.Backfiller/PurgeQueues"
	Backfiller_IndexContracts_FullMethodName                 = "/eigenlayer.blocklake.api.v1.Backfiller/IndexContracts"
	Backfiller_ReIndexTransactionsForContract_FullMethodName = "/eigenlayer.blocklake.api.v1.Backfiller/ReIndexTransactionsForContract"
	Backfiller_ReIndexRestakedStrategies_FullMethodName      = "/eigenlayer.blocklake.api.v1.Backfiller/ReIndexRestakedStrategies"
)

// BackfillerClient is the client API for Backfiller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackfillerClient interface {
	StartBackfill(ctx context.Context, in *BackfillRequest, opts ...grpc.CallOption) (*BackfillResponse, error)
	PurgeQueues(ctx context.Context, in *PurgeQueuesRequest, opts ...grpc.CallOption) (*PurgeQueuesResponse, error)
	IndexContracts(ctx context.Context, in *IndexContractsRequest, opts ...grpc.CallOption) (*IndexContractsResponse, error)
	ReIndexTransactionsForContract(ctx context.Context, in *ReIndexTransactionsForContractRequest, opts ...grpc.CallOption) (*ReIndexTransactionsForContractResponse, error)
	ReIndexRestakedStrategies(ctx context.Context, in *ReIndexRestakedStrategiesRequest, opts ...grpc.CallOption) (*ReIndexRestakedStrategiesResponse, error)
}

type backfillerClient struct {
	cc grpc.ClientConnInterface
}

func NewBackfillerClient(cc grpc.ClientConnInterface) BackfillerClient {
	return &backfillerClient{cc}
}

func (c *backfillerClient) StartBackfill(ctx context.Context, in *BackfillRequest, opts ...grpc.CallOption) (*BackfillResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BackfillResponse)
	err := c.cc.Invoke(ctx, Backfiller_StartBackfill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backfillerClient) PurgeQueues(ctx context.Context, in *PurgeQueuesRequest, opts ...grpc.CallOption) (*PurgeQueuesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurgeQueuesResponse)
	err := c.cc.Invoke(ctx, Backfiller_PurgeQueues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backfillerClient) IndexContracts(ctx context.Context, in *IndexContractsRequest, opts ...grpc.CallOption) (*IndexContractsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IndexContractsResponse)
	err := c.cc.Invoke(ctx, Backfiller_IndexContracts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backfillerClient) ReIndexTransactionsForContract(ctx context.Context, in *ReIndexTransactionsForContractRequest, opts ...grpc.CallOption) (*ReIndexTransactionsForContractResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReIndexTransactionsForContractResponse)
	err := c.cc.Invoke(ctx, Backfiller_ReIndexTransactionsForContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backfillerClient) ReIndexRestakedStrategies(ctx context.Context, in *ReIndexRestakedStrategiesRequest, opts ...grpc.CallOption) (*ReIndexRestakedStrategiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReIndexRestakedStrategiesResponse)
	err := c.cc.Invoke(ctx, Backfiller_ReIndexRestakedStrategies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackfillerServer is the server API for Backfiller service.
// All implementations should embed UnimplementedBackfillerServer
// for forward compatibility.
type BackfillerServer interface {
	StartBackfill(context.Context, *BackfillRequest) (*BackfillResponse, error)
	PurgeQueues(context.Context, *PurgeQueuesRequest) (*PurgeQueuesResponse, error)
	IndexContracts(context.Context, *IndexContractsRequest) (*IndexContractsResponse, error)
	ReIndexTransactionsForContract(context.Context, *ReIndexTransactionsForContractRequest) (*ReIndexTransactionsForContractResponse, error)
	ReIndexRestakedStrategies(context.Context, *ReIndexRestakedStrategiesRequest) (*ReIndexRestakedStrategiesResponse, error)
}

// UnimplementedBackfillerServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackfillerServer struct{}

func (UnimplementedBackfillerServer) StartBackfill(context.Context, *BackfillRequest) (*BackfillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBackfill not implemented")
}
func (UnimplementedBackfillerServer) PurgeQueues(context.Context, *PurgeQueuesRequest) (*PurgeQueuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeQueues not implemented")
}
func (UnimplementedBackfillerServer) IndexContracts(context.Context, *IndexContractsRequest) (*IndexContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexContracts not implemented")
}
func (UnimplementedBackfillerServer) ReIndexTransactionsForContract(context.Context, *ReIndexTransactionsForContractRequest) (*ReIndexTransactionsForContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReIndexTransactionsForContract not implemented")
}
func (UnimplementedBackfillerServer) ReIndexRestakedStrategies(context.Context, *ReIndexRestakedStrategiesRequest) (*ReIndexRestakedStrategiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReIndexRestakedStrategies not implemented")
}
func (UnimplementedBackfillerServer) testEmbeddedByValue() {}

// UnsafeBackfillerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackfillerServer will
// result in compilation errors.
type UnsafeBackfillerServer interface {
	mustEmbedUnimplementedBackfillerServer()
}

func RegisterBackfillerServer(s grpc.ServiceRegistrar, srv BackfillerServer) {
	// If the following call pancis, it indicates UnimplementedBackfillerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Backfiller_ServiceDesc, srv)
}

func _Backfiller_StartBackfill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackfillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackfillerServer).StartBackfill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backfiller_StartBackfill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackfillerServer).StartBackfill(ctx, req.(*BackfillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backfiller_PurgeQueues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeQueuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackfillerServer).PurgeQueues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backfiller_PurgeQueues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackfillerServer).PurgeQueues(ctx, req.(*PurgeQueuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backfiller_IndexContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexContractsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackfillerServer).IndexContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backfiller_IndexContracts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackfillerServer).IndexContracts(ctx, req.(*IndexContractsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backfiller_ReIndexTransactionsForContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReIndexTransactionsForContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackfillerServer).ReIndexTransactionsForContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backfiller_ReIndexTransactionsForContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackfillerServer).ReIndexTransactionsForContract(ctx, req.(*ReIndexTransactionsForContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backfiller_ReIndexRestakedStrategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReIndexRestakedStrategiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackfillerServer).ReIndexRestakedStrategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backfiller_ReIndexRestakedStrategies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackfillerServer).ReIndexRestakedStrategies(ctx, req.(*ReIndexRestakedStrategiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Backfiller_ServiceDesc is the grpc.ServiceDesc for Backfiller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backfiller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eigenlayer.blocklake.api.v1.Backfiller",
	HandlerType: (*BackfillerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartBackfill",
			Handler:    _Backfiller_StartBackfill_Handler,
		},
		{
			MethodName: "PurgeQueues",
			Handler:    _Backfiller_PurgeQueues_Handler,
		},
		{
			MethodName: "IndexContracts",
			Handler:    _Backfiller_IndexContracts_Handler,
		},
		{
			MethodName: "ReIndexTransactionsForContract",
			Handler:    _Backfiller_ReIndexTransactionsForContract_Handler,
		},
		{
			MethodName: "ReIndexRestakedStrategies",
			Handler:    _Backfiller_ReIndexRestakedStrategies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eigenlayer/blocklake/v1/api.proto",
}
